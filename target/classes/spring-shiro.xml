<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 1. 配置 SecurityManager! 安全管理器配置 -->

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 自定义realm选择器 -->
		<property name="authenticator" ref="authenticator"></property>
		<!-- 可以配置多个Realm，其实会把realms属性赋值给ModularRealmAuthenticator的realms属性 -->
		<property name="realms">
			<list>
				<ref bean="userRealm" />
				<ref bean="adminRealm" />
			</list>
		</property>
		<!-- 配置session管理器 -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- 缓存 -->
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	<!-- 2. 配置 CacheManager. 2.1 需要加入 ehcache 的 jar 包及配置文件. -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>

	<!-- 默认的选择realm<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator"> 
		<property name="authenticationStrategy"> <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean> 
		</property> </bean> -->
	<!-- 7. 配置使用自定义认证器，可以实现多Realm认证，并且可以根据登录类型指定使用特定的Realm -->
	<bean id="authenticator" class="com.myblog.shiro.CustomizedModularRealmAuthenticator">
		<!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>
	<!-- Used by the SecurityManager to access security data (users, roles, 
		etc). Many other realm implementations can be used too (PropertiesRealm, 
		LdapRealm, etc. -->
	<!-- 3. 配置 Realm 3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean -->
	<bean id="adminRealm" class="com.myblog.realm.AdminRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 加密方式为MD5，其他默认 -->
				<property name="hashAlgorithmName" value="MD5" />

			</bean>
		</property>
		<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authenticationCacheName" value="authenticationCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorizationCache" />
	</bean>
	<bean id="userRealm" class="com.myblog.realm.UserRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 加密算法为MD5 -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!-- 加密次数 -->
				<property name="hashIterations" value="2"></property>
			</bean>
		</property>

	</bean>

	<!-- ========================================================= Shiro Spring-specific 
		integration ========================================================= -->
	<!-- Post processor that automatically invokes init() and destroy() methods 
		for Spring-configured Shiro objects so you don't have to 1) specify an init-method 
		and destroy-method attributes for every bean definition and 2) even know 
		which Shiro objects require these methods to be called. -->
	<!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro 
		bean 的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run: -->
	<!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	 
	 <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <!-- 用于生成会话ID，默认就是JavaUuidSessionIdGenerator，使用java.util.UUID生成 -->
		 <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
   <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	<!-- 自定义session监听器 -->
	<bean id="recordFirst" class="com.myblog.httpsessionListener.RecordFirst"></bean>
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 配置session监听器 -->
		<property name="sessionListeners" ref="recordFirst" />
		<!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
		<property name="globalSessionTimeout" value="3600000" />
		<!-- 需要让此session可以使用该定时调度器进行检测 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 定义要使用的无效的Session定时调度器 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!-- 定义Session可以进行序列化的工具类 -->
		<property name="sessionDAO"    ref="sessionDAO" />
		 <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		 <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
		<property name="sessionIdCookieEnabled" value="true" />
	</bean>
	<!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
	<!-- Shiro也提供了使用Quartz会话验证调度器,org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler,使用时需要导入shiro-quartz依赖 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<!-- 设置session的失效扫描间隔，单位为毫秒 -->
		<property name="sessionValidationInterval" value="600000" />
		<!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<property name="name" value="JSESSID" />
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
	</bean>

	<!-- Define the Shiro Filter here (as a FactoryBean) instead of directly 
		in web.xml - web.xml uses the DelegatingFilterProxy to access this bean. 
		This allows us to wire things with more control as well utilize nice Spring 
		things such as PropertiesPlaceholderConfigurer and abstract beans or anything 
		else we might need: -->
	<!-- 6. 配置 ShiroFilter. 6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 
		的 <filter-name> 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 
		IOC 容器中查找和 <filter-name> 名字对应的 filter bean. -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.html" />
		<property name="successUrl" value="/bloger.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<property name="filters">
			<map>
				<entry key="shiroLoginAdminFilter" value-ref="shiroLoginAdminFilter" />
				<entry key="shiroLoginUserFilter" value-ref="shiroLoginUserFilter" />
				<entry key="kickout" value-ref="kickoutSessionControlFilter" />
			</map>
		</property>
		<!-- <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property> -->

		<!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 1). anon 可以被匿名访问 2). authc 必须认证(即登录)后才可能访问的页面. 
			3). logout 登出. 4). roles 角色过滤器 -->

		<property name="filterChainDefinitions">
			<value>
				/personalNew.html=shiroLoginUserFilter,kickout,authc,roles[user]
				<!-- 可以匿名访问 -->
				/*New.html = kickout,anon
				/user/basic/add*.do=kickout,shiroLoginUserFilter,authc,roles[user]
				/user/personal/**=kickout,shiroLoginUserFilter,authc,roles[user]
				<!-- 需要认证并且是管理角色 -->
				/bloger.jsp=kickout,authc,roles[admin]
				<!-- 需要认证并且是管理角色 -->
				/bloger/**=kickout,shiroLoginAdminFilter,authc,roles[admin]
				/login.jsp = kickout,anon
				
			</value>
		</property>

	</bean>
	<!-- 用户重复登陆拦截 -->
	<bean id="kickoutSessionControlFilter" class="com.myblog.web.filter.KickoutSessionControlFilter">
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="kickoutAfter" value="false" />
		<property name="maxSession" value="1" />
		<property name="kickoutUrl" value="/WEB-INF/err/errUnPowerNew.jsp" />
	</bean>
	<!-- 用于管理员未登录拦截 -->
	<bean id="shiroLoginAdminFilter" class="com.myblog.web.filter.ShiroLoginAdminFilter"></bean>
	<!-- 用户未登录拦截 -->
	<bean id="shiroLoginUserFilter" class="com.myblog.web.filter.ShiroLoginUserFilter"></bean>

</beans>

















